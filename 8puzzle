 import heapq
 class PuzzleNode:
     def __init__(self, state, parent=None, move=""):
         self.state = state
         self.parent = parent
         self.move = move
         self.depth = 0 if parent is None else parent.depth + 1
         self.cost = self.depth + self.calculate_heuristic()
     def calculate_heuristic(self):
         total_distance = 0
         for i in range(3):
             for j in range(3):
                 if self.state[i][j] != 0:
                     row, col = divmod(self.state[i][j] - 1, 3)
                     total_distance += abs(i - row) + abs(j - col)
         return total_distance
     def __lt__(self, other):
         return self.cost < other.cost
     def __eq__(self, other):
         return self.state == other.state 
     def get_possible_moves(node):
        i, j = next((i, j) for i, row in enumerate(node.state) for j, val in enumerate(row) if val == 0)
     moves = [] 
     if i > 0:
         moves.append((-1, 0, "Up"))
     if i < 2:
moves.append((1, 0, "Down"))
     if j > 0:
        moves.append((0, -1, "Left"))
     if j < 2:
         moves.append((0, 1, "Right")) 
     return moves
def solve_8_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    visited = set()
    open_list = [initial_node]
    while open_list:
        current_node = heapq.heappop(open_list)
        visited.add(current_node.state)
        if current_node.state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            path = []
            while current_node.parent:
                path.append(current_node.move)
                current_node = current_node.parent
            return path[::-1]
        for move in get_possible_moves(current_node):
            i, j, move_name = move
            new_state = [row[:] for row in current_node.state]
            new_state[i + 1][j + 1], new_state[i][j] = new_state[i][j], new_state[i + 1][j + 1]
            new_node = PuzzleNode(new_state, current_node, move_name)
            if new_node.state not in visited:
                heapq.heappush(open_list, new_node)
    return None
if __name__ == "__main__":
    initial_state = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]
    solution = solve_8_puzzle(initial_state)
    if solution:
        print("Solution found in", len(solution), "moves:")
        for move in solution:
            print(move)
    else:
        print("No solution found.")
[DEBUG ON]
[DEBUG OFF]
